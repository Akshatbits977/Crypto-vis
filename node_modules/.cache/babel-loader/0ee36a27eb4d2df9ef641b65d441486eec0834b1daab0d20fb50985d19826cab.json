{"ast":null,"code":"import React,{useState,useEffect}from'react';import{BarChart,Bar,XAxis,YAxis,CartesianGrid,Tooltip,Legend}from'recharts';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function CipherBarGraph(_ref){let{data,selectedCiphers}=_ref;if(!data)data=[];if(!selectedCiphers)selectedCiphers=[];const generateRandomColor=()=>\"#\".concat(Math.floor(Math.random()*16777215).toString(16));const generateColors=count=>{const colors=[];for(let i=0;i<count;i++){colors.push(generateRandomColor());}return colors;};const colors=generateColors(selectedCiphers.length);function formatDate(isoString){const date=new Date(isoString);if(!isNaN(date.getTime())){return\"\".concat(date.getFullYear(),\"-\").concat(String(date.getMonth()+1).padStart(2,'0'),\"-\").concat(String(date.getDate()).padStart(2,'0'));}return isoString;}const processedData=data.map(entry=>{let obj={date:formatDate(entry.collectionDate)};entry.library.forEach(lib=>{lib.Ciphers.forEach(cipher=>{const cipherName=lib.LibraryName==='openssl'?\"\".concat(cipher.CipherName,\"_\").concat(cipher.Type,\"_\").concat(cipher.MessageSize):cipher.CipherName;if(selectedCiphers.includes(cipherName)){obj[cipherName]=cipher.Value;}});});return obj;}).sort((a,b)=>new Date(a.date)-new Date(b.date));// Calculate the width of the chart based on the number of selected ciphers\nconst chartWidth=Math.max(800,selectedCiphers.length*50);return/*#__PURE__*/_jsxs(\"div\",{style:{margin:'20px'},children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Performance Metrics Over Time\"}),/*#__PURE__*/_jsx(\"div\",{style:{overflowX:'auto'},children:/*#__PURE__*/_jsxs(BarChart,{width:chartWidth,height:400,data:processedData,margin:{top:20,right:30,left:20,bottom:5},children:[/*#__PURE__*/_jsx(CartesianGrid,{strokeDasharray:\"3 3\"}),/*#__PURE__*/_jsx(XAxis,{dataKey:\"date\",angle:-45,textAnchor:\"end\",interval:0,height:70}),/*#__PURE__*/_jsx(YAxis,{}),/*#__PURE__*/_jsx(Tooltip,{}),/*#__PURE__*/_jsx(Legend,{}),selectedCiphers.map((cipherName,index)=>/*#__PURE__*/_jsx(Bar,{dataKey:cipherName,fill:colors[index]},cipherName))]})})]});}export default CipherBarGraph;","map":{"version":3,"names":["React","useState","useEffect","BarChart","Bar","XAxis","YAxis","CartesianGrid","Tooltip","Legend","jsx","_jsx","jsxs","_jsxs","CipherBarGraph","_ref","data","selectedCiphers","generateRandomColor","concat","Math","floor","random","toString","generateColors","count","colors","i","push","length","formatDate","isoString","date","Date","isNaN","getTime","getFullYear","String","getMonth","padStart","getDate","processedData","map","entry","obj","collectionDate","library","forEach","lib","Ciphers","cipher","cipherName","LibraryName","CipherName","Type","MessageSize","includes","Value","sort","a","b","chartWidth","max","style","margin","children","overflowX","width","height","top","right","left","bottom","strokeDasharray","dataKey","angle","textAnchor","interval","index","fill"],"sources":["/home/toolsuser/akshat/crypto_new/crab_app/src/react-login-app/src/CipherBarGraph.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\n\nfunction CipherBarGraph({ data, selectedCiphers }) {\n    if (!data) data = [];\n    if (!selectedCiphers) selectedCiphers = [];\n\n    const generateRandomColor = () => `#${Math.floor(Math.random()*16777215).toString(16)}`;\n\n    const generateColors = (count) => {\n        const colors = [];\n        for (let i = 0; i < count; i++) {\n            colors.push(generateRandomColor());\n        }\n        return colors;\n    };\n\n    const colors = generateColors(selectedCiphers.length);\n    \n    function formatDate(isoString) {\n        const date = new Date(isoString);\n        if (!isNaN(date.getTime())) {\n            return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;\n        }\n        return isoString;\n    }\n\n    const processedData = data.map(entry => {\n        let obj = { date: formatDate(entry.collectionDate) };\n        entry.library.forEach(lib => {\n            lib.Ciphers.forEach(cipher => {\n                const cipherName = lib.LibraryName === 'openssl' ? `${cipher.CipherName}_${cipher.Type}_${cipher.MessageSize}` : cipher.CipherName;\n                if (selectedCiphers.includes(cipherName)) {\n                    obj[cipherName] = cipher.Value;\n                }\n            });\n        });\n        return obj;\n    }).sort((a, b) => new Date(a.date) - new Date(b.date));\n\n    // Calculate the width of the chart based on the number of selected ciphers\n    const chartWidth = Math.max(800, selectedCiphers.length * 50);\n\n    return (\n        <div style={{ margin: '20px' }}>\n            <h3>Performance Metrics Over Time</h3>\n            <div style={{ overflowX: 'auto' }}>\n                <BarChart width={chartWidth} height={400} data={processedData} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"date\" angle={-45} textAnchor=\"end\" interval={0} height={70} />\n                    <YAxis />\n                    <Tooltip />\n                    <Legend />\n                    {selectedCiphers.map((cipherName, index) => (\n                        <Bar dataKey={cipherName} fill={colors[index]} key={cipherName} />\n                    ))}\n                </BarChart>\n            </div>\n        </div>\n    );\n}\n\nexport default CipherBarGraph;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}