{"ast":null,"code":"var _s = $RefreshSig$();\n// MetadataFilterValues.js\nimport React, { useState, useEffect } from 'react';\nfunction MetadataFilterValues({\n  onDataLoaded\n}) {\n  _s();\n  const [metadataValues, setMetadataValues] = useState({\n    metadataHeaders: [],\n    metadataValues: {}\n  });\n  useEffect(() => {\n    fetch('https://perfwsw3.aus.stglabs.ibm.com:3011/fetchCollectionData/merged').then(response => response.json()).then(fetchedData => {\n      const metadataHeaders = fetchedData.length > 0 ? Object.keys(fetchedData[0].metadata) : [];\n      const uniqueValues = {};\n      metadataHeaders.forEach(header => {\n        const values = fetchedData.map(entry => entry.metadata[header]);\n        uniqueValues[header] = [...new Set(values)];\n      });\n      setMetadataValues({\n        metadataHeaders,\n        metadataValues: uniqueValues\n      });\n      onDataLoaded({\n        metadataHeaders,\n        metadataValues: uniqueValues\n      });\n    });\n  }, [onDataLoaded]);\n\n  // No need to render anything in this component\n  return null;\n}\n_s(MetadataFilterValues, \"Mu4HKdvo7X1q4LHZmLlOMA9lvKo=\");\n_c = MetadataFilterValues;\nexport default MetadataFilterValues;\nvar _c;\n$RefreshReg$(_c, \"MetadataFilterValues\");","map":{"version":3,"names":["React","useState","useEffect","MetadataFilterValues","onDataLoaded","_s","metadataValues","setMetadataValues","metadataHeaders","fetch","then","response","json","fetchedData","length","Object","keys","metadata","uniqueValues","forEach","header","values","map","entry","Set","_c","$RefreshReg$"],"sources":["/home/toolsuser/akshat/crypto_new/crab_app/src/react-login-app/src/MetadataFilterValues.js"],"sourcesContent":["// MetadataFilterValues.js\nimport React, { useState, useEffect } from 'react';\n\nfunction MetadataFilterValues({ onDataLoaded }) {\n  const [metadataValues, setMetadataValues] = useState({ metadataHeaders: [], metadataValues: {} });\n\n  useEffect(() => {\n    fetch('https://perfwsw3.aus.stglabs.ibm.com:3011/fetchCollectionData/merged')\n      .then((response) => response.json())\n      .then((fetchedData) => {\n        const metadataHeaders = fetchedData.length > 0 ? Object.keys(fetchedData[0].metadata) : [];\n        const uniqueValues = {};\n\n        metadataHeaders.forEach((header) => {\n          const values = fetchedData.map((entry) => entry.metadata[header]);\n          uniqueValues[header] = [...new Set(values)];\n        });\n\n        setMetadataValues({ metadataHeaders, metadataValues: uniqueValues });\n        onDataLoaded({ metadataHeaders, metadataValues: uniqueValues });\n      });\n  }, [onDataLoaded]);\n\n  // No need to render anything in this component\n  return null;\n}\n\nexport default MetadataFilterValues;\n\n"],"mappings":";AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAElD,SAASC,oBAAoBA,CAAC;EAAEC;AAAa,CAAC,EAAE;EAAAC,EAAA;EAC9C,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGN,QAAQ,CAAC;IAAEO,eAAe,EAAE,EAAE;IAAEF,cAAc,EAAE,CAAC;EAAE,CAAC,CAAC;EAEjGJ,SAAS,CAAC,MAAM;IACdO,KAAK,CAAC,sEAAsE,CAAC,CAC1EC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,WAAW,IAAK;MACrB,MAAML,eAAe,GAAGK,WAAW,CAACC,MAAM,GAAG,CAAC,GAAGC,MAAM,CAACC,IAAI,CAACH,WAAW,CAAC,CAAC,CAAC,CAACI,QAAQ,CAAC,GAAG,EAAE;MAC1F,MAAMC,YAAY,GAAG,CAAC,CAAC;MAEvBV,eAAe,CAACW,OAAO,CAAEC,MAAM,IAAK;QAClC,MAAMC,MAAM,GAAGR,WAAW,CAACS,GAAG,CAAEC,KAAK,IAAKA,KAAK,CAACN,QAAQ,CAACG,MAAM,CAAC,CAAC;QACjEF,YAAY,CAACE,MAAM,CAAC,GAAG,CAAC,GAAG,IAAII,GAAG,CAACH,MAAM,CAAC,CAAC;MAC7C,CAAC,CAAC;MAEFd,iBAAiB,CAAC;QAAEC,eAAe;QAAEF,cAAc,EAAEY;MAAa,CAAC,CAAC;MACpEd,YAAY,CAAC;QAAEI,eAAe;QAAEF,cAAc,EAAEY;MAAa,CAAC,CAAC;IACjE,CAAC,CAAC;EACN,CAAC,EAAE,CAACd,YAAY,CAAC,CAAC;;EAElB;EACA,OAAO,IAAI;AACb;AAACC,EAAA,CAtBQF,oBAAoB;AAAAsB,EAAA,GAApBtB,oBAAoB;AAwB7B,eAAeA,oBAAoB;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}