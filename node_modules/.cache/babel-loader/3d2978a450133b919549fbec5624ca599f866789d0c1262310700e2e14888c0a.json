{"ast":null,"code":"var _jsxFileName = \"/home/toolsuser/crypto_vis/src/MetadataContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MetadataContext = /*#__PURE__*/createContext();\nexport const MetadataProvider = ({\n  children\n}) => {\n  _s();\n  const [metadata, setMetadata] = useState([]);\n  useEffect(() => {\n    // Fetch metadata\n    fetch('https://perfwsw3.aus.stglabs.ibm.com:3011/fetchCollectionData/merged').then(response => response.json()).then(fetchedData => {\n      setMetadata(fetchedData);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(MetadataContext.Provider, {\n    value: {\n      metadata,\n      setMetadata\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n};\n_s(MetadataProvider, \"p8LydVGhq2sTkuABOp61r5d0UaM=\");\n_c = MetadataProvider;\nexport const useMetadata = () => {\n  _s2();\n  const context = useContext(MetadataContext);\n  if (!context) {\n    throw new Error('useMetadata must be used within a MetadataProvider');\n  }\n  return context;\n};\n_s2(useMetadata, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"MetadataProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","MetadataContext","MetadataProvider","children","_s","metadata","setMetadata","fetch","then","response","json","fetchedData","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useMetadata","_s2","context","Error","$RefreshReg$"],"sources":["/home/toolsuser/crypto_vis/src/MetadataContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst MetadataContext = createContext();\n\nexport const MetadataProvider = ({ children }) => {\n  const [metadata, setMetadata] = useState([]);\n\n  useEffect(() => {\n    // Fetch metadata\n    fetch('https://perfwsw3.aus.stglabs.ibm.com:3011/fetchCollectionData/merged')\n      .then((response) => response.json())\n      .then((fetchedData) => {\n        setMetadata(fetchedData);\n      });\n  }, []);\n\n  return (\n    <MetadataContext.Provider value={{ metadata, setMetadata }}>\n      {children}\n    </MetadataContext.Provider>\n  );\n};\n\nexport const useMetadata = () => {\n  const context = useContext(MetadataContext);\n  if (!context) {\n    throw new Error('useMetadata must be used within a MetadataProvider');\n  }\n  return context;\n};\n\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,eAAe,gBAAGN,aAAa,CAAC,CAAC;AAEvC,OAAO,MAAMO,gBAAgB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAChD,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd;IACAS,KAAK,CAAC,sEAAsE,CAAC,CAC1EC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,WAAW,IAAK;MACrBL,WAAW,CAACK,WAAW,CAAC;IAC1B,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEX,OAAA,CAACC,eAAe,CAACW,QAAQ;IAACC,KAAK,EAAE;MAAER,QAAQ;MAAEC;IAAY,CAAE;IAAAH,QAAA,EACxDA;EAAQ;IAAAW,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACe,CAAC;AAE/B,CAAC;AAACb,EAAA,CAjBWF,gBAAgB;AAAAgB,EAAA,GAAhBhB,gBAAgB;AAmB7B,OAAO,MAAMiB,WAAW,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC/B,MAAMC,OAAO,GAAGzB,UAAU,CAACK,eAAe,CAAC;EAC3C,IAAI,CAACoB,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,oDAAoD,CAAC;EACvE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,WAAW;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}