{"ast":null,"code":"var _jsxFileName = \"/home/toolsuser/akshat/crypto_new/crab_app/src/Crypto-vis/src/CipherBarGraph.js\";\nimport React, { useState, useEffect } from 'react';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CipherBarGraph({\n  data,\n  selectedCiphers\n}) {\n  if (!data) data = [];\n  if (!selectedCiphers) selectedCiphers = [];\n  const generateRandomColor = () => `#${Math.floor(Math.random() * 16777215).toString(16)}`;\n  const generateColors = count => {\n    const colors = [];\n    for (let i = 0; i < count; i++) {\n      colors.push(generateRandomColor());\n    }\n    return colors;\n  };\n  const colors = generateColors(selectedCiphers.length);\n  function formatDate(isoString) {\n    const date = new Date(isoString);\n    if (!isNaN(date.getTime())) {\n      return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;\n    }\n    return isoString;\n  }\n  const processedData = data.map(entry => {\n    let obj = {\n      date: formatDate(entry.collectionDate)\n    };\n    entry.library.forEach(lib => {\n      lib.Ciphers.forEach(cipher => {\n        const cipherName = lib.LibraryName === 'openssl' ? `${cipher.CipherName}_${cipher.Type}_${cipher.MessageSize}` : cipher.CipherName;\n        if (selectedCiphers.includes(cipherName)) {\n          obj[cipherName] = cipher.Value;\n        }\n      });\n    });\n    return obj;\n  }).sort((a, b) => new Date(a.date) - new Date(b.date));\n\n  // Calculate the width of the chart based on the number of selected ciphers\n  const chartWidth = Math.max(800, selectedCiphers.length * 50);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      margin: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Performance Metrics Over Time\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        overflowX: 'auto'\n      },\n      children: /*#__PURE__*/_jsxDEV(BarChart, {\n        width: chartWidth,\n        height: 400,\n        data: processedData,\n        margin: {\n          top: 20,\n          right: 30,\n          left: 20,\n          bottom: 5\n        },\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"date\",\n          angle: -45,\n          textAnchor: \"end\",\n          interval: 0,\n          height: 70\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this), selectedCiphers.map((cipherName, index) => /*#__PURE__*/_jsxDEV(Bar, {\n          dataKey: cipherName,\n          fill: colors[index]\n        }, cipherName, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n}\n_c = CipherBarGraph;\nexport default CipherBarGraph;\nvar _c;\n$RefreshReg$(_c, \"CipherBarGraph\");","map":{"version":3,"names":["React","useState","useEffect","BarChart","Bar","XAxis","YAxis","CartesianGrid","Tooltip","Legend","jsxDEV","_jsxDEV","CipherBarGraph","data","selectedCiphers","generateRandomColor","Math","floor","random","toString","generateColors","count","colors","i","push","length","formatDate","isoString","date","Date","isNaN","getTime","getFullYear","String","getMonth","padStart","getDate","processedData","map","entry","obj","collectionDate","library","forEach","lib","Ciphers","cipher","cipherName","LibraryName","CipherName","Type","MessageSize","includes","Value","sort","a","b","chartWidth","max","style","margin","children","fileName","_jsxFileName","lineNumber","columnNumber","overflowX","width","height","top","right","left","bottom","strokeDasharray","dataKey","angle","textAnchor","interval","index","fill","_c","$RefreshReg$"],"sources":["/home/toolsuser/akshat/crypto_new/crab_app/src/Crypto-vis/src/CipherBarGraph.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\n\nfunction CipherBarGraph({ data, selectedCiphers }) {\n    if (!data) data = [];\n    if (!selectedCiphers) selectedCiphers = [];\n\n    const generateRandomColor = () => `#${Math.floor(Math.random()*16777215).toString(16)}`;\n\n    const generateColors = (count) => {\n        const colors = [];\n        for (let i = 0; i < count; i++) {\n            colors.push(generateRandomColor());\n        }\n        return colors;\n    };\n\n    const colors = generateColors(selectedCiphers.length);\n    \n    function formatDate(isoString) {\n        const date = new Date(isoString);\n        if (!isNaN(date.getTime())) {\n            return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;\n        }\n        return isoString;\n    }\n\n    const processedData = data.map(entry => {\n        let obj = { date: formatDate(entry.collectionDate) };\n        entry.library.forEach(lib => {\n            lib.Ciphers.forEach(cipher => {\n                const cipherName = lib.LibraryName === 'openssl' ? `${cipher.CipherName}_${cipher.Type}_${cipher.MessageSize}` : cipher.CipherName;\n                if (selectedCiphers.includes(cipherName)) {\n                    obj[cipherName] = cipher.Value;\n                }\n            });\n        });\n        return obj;\n    }).sort((a, b) => new Date(a.date) - new Date(b.date));\n\n    // Calculate the width of the chart based on the number of selected ciphers\n    const chartWidth = Math.max(800, selectedCiphers.length * 50);\n\n    return (\n        <div style={{ margin: '20px' }}>\n            <h3>Performance Metrics Over Time</h3>\n            <div style={{ overflowX: 'auto' }}>\n                <BarChart width={chartWidth} height={400} data={processedData} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"date\" angle={-45} textAnchor=\"end\" interval={0} height={70} />\n                    <YAxis />\n                    <Tooltip />\n                    <Legend />\n                    {selectedCiphers.map((cipherName, index) => (\n                        <Bar dataKey={cipherName} fill={colors[index]} key={cipherName} />\n                    ))}\n                </BarChart>\n            </div>\n        </div>\n    );\n}\n\nexport default CipherBarGraph;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}